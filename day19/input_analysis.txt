#ip 4        
addi 4 16 4  #  0: ip += 16                     # fn sum_of_divisors(r5) -> r0
seti 1 2 3   #  1: r[3] = 1                     #   r3 = 1; do {
seti 1 6 1   #  2: r[1] = 1                     #     r1 = 1; do {
mulr 3 1 2   #  3: r[2] = r[3] * r[1]           #       r2 = r3 * r1
eqrr 2 5 2   #  4: r[2] = r[2] == r[5] ? 1 : 0  #       if (r5==r2) {
addr 2 4 4   #  5: ip += r[2]                   #         r0 += r3
addi 4 1 4   #  6: ip += 1                      #       }
addr 3 0 0   #  7: r[0] += r[3]                 #     
addi 1 1 1   #  8: r[1] += 1                    #       r1 += 1
gtrr 1 5 2   #  9: r[2] = r[1] > r[5] ? 1 : 0   #     } until (r1>r5)
addr 4 2 4   # 10: ip += r[2]                   #   
seti 2 8 4   # 11: ip = 2                       #
addi 3 1 3   # 12: r[3] += 1                    #     r3 += 1
gtrr 3 5 2   # 13: r[2] = r[3] > r[5] ? 1 : 0   #   } until (r3>r5)
addr 2 4 4   # 14: ip += r[2]                   #   
seti 1 4 4   # 15: ip = 1                       # 
mulr 4 4 4   # 16: ip *= ip                     # exit
addi 5 2 5   # 17: r[5] += 2                    # r5 = 2                  # r5 = 2
mulr 5 5 5   # 18: r[5] *= r[5]                 # r5 *= r5                # r5 = 4
mulr 4 5 5   # 19: r[5] *= ip                   # r5 *= ip                # r5 = 4 * 19 = 76
muli 5 11 5  # 20: r[5] *= 11                   # r5 *= 11                # r5 = 4 * 19 * 11 = 836
addi 2 5 2   # 21: r[2] += 5                    # r2 += 5                 # r2 = 5
mulr 2 4 2   # 22: r[2] *= ip                   # r2 *= ip                # r2 = 5 * 22 = 110
addi 2 18 2  # 23: r[2] += 18                   # r2 += 18                # r2 = 5 * 22 + 18 = 128
addr 5 2 5   # 24: r[5] += r[2]                 # r5 += r2                # r5 = 836 + 128 = 964
addr 4 0 4   # 25: ip += r[0]                   # 
seti 0 6 4   # 26: ip = 0                       # if (r0==1) {
setr 4 8 2   # 27: r[2] = ip                    # r2 = ip                 # r2 = 27
mulr 2 4 2   # 28: r[2] *= ip                   # r2 *= ip                # r2 = 27 * 28 = 756
addr 4 2 2   # 29: r[2] += ip                   # r2 += ip                # r2 = 27 * 28 + 29 = 785
mulr 4 2 2   # 30: r[2] *= ip                   # r2 *= ip                # r2 = (27 * 28 + 29) * 30 = 23550
muli 2 14 2  # 31: r[2] *= 14                   # r2 *= 14                # r2 = (27 * 28 + 29) * 30 * 14 = 329700
mulr 2 4 2   # 32: r[2] *= ip                   # r2 *= ip                # r2 = (27 * 28 + 29) * 30 * 14 * 32 = 10550400
addr 5 2 5   # 33: r[5] += r[2]                 # r5 += r2                # r5 = 964 + 10550400 = 10551364
seti 0 1 0   # 34: r[0] = 0                     # r0 = 0 
seti 0 5 4   # 35: ip = 0                       # } sum_of_divisors(r5)